#!/usr/bin/env php
<?php
/**
 * This file is part of the TelegramBot package.
 *
 * (c) Andre Vlasov <areyouhappyihopeso@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use Ducha\TelegramBot\ConfigLoader;
use Ducha\TelegramBot\Process;
use Symfony\Component\DependencyInjection\Container;
use Ducha\TelegramBot\Telegram;

require_once 'autoload.php';

$validArgs = array(
    'status', 'stop', 'restart', 'start', 'help', 'test', 'check'
);

if (!isset($argv[1]) || !preg_match('/^('.implode('|', $validArgs).')$/', $argv[1])){
    help($validArgs); exit;
}

$action = $argv[1];

$configLoader = new ConfigLoader();

$container = $configLoader->getContainer();
$logDir = $container->getParameter('telegram_bot_log_dir');
$file = $logDir . '/process';
if (file_exists($file)){
    $process = unserialize(file_get_contents($file));
}else{
    $command = 'php ' . __DIR__ . '/app.php';
    $process = new Process($command);
}

/**
 * @param Process $process
 * @param $file
 * @return bool
 */
function start($process, $file){
    $started = false;
    if (file_exists($file)){
        echo 'The process already is running. Use `restart` or `stop` arguments.'; echo "\n";
    }else{
        if ($process->start()){
            file_put_contents($file, serialize($process));
            $started = true;
            echo 'The process is starting now!'; echo "\n";
        }else{
            echo 'Can`t start the process'; echo "\n";
        }
    }

    return $started;
}

/**
 * @param Process $process
 * @param $file
 * @return bool
 */
function stop($process, $file){
    $stopped = true;
    $file2 = __DIR__ . '/logs/running';
    if ($process->stop()){
        unlink($file);
        if (file_exists($file2)){
            unlink($file2);
        }
        echo 'The process is stopped now!'; echo "\n";
    }else{
        echo 'Can`t stop process'; echo "\n";
        $stopped = false;
    }

    return $stopped;
}

/**
 * @param Process $process
 * @return bool
 */
function status($process){
    $started = false;
    if ($process->status()){
        echo 'The process is running'; echo "\n";
        $started = true;
    }else{
        echo 'The process is not running'; echo "\n";
        foreach (array('process', 'running') as $key){
            $file = __DIR__ . '/logs/' . $key;
            if (file_exists($file)){
                unlink($file);
            }
        }
    }

    return $started;
}
/**
 * Show - what arguments are valid
 * @param $validArgs
 */
function help($validArgs){
    echo 'Valid arguments are ' . implode(', ', $validArgs);
    echo "\n";
}
/**
 * Execute getMe method and show result
 * @param Container $container
 */
function test(Container $container){
    $telegram = new Telegram($container->getParameter('telegram_bot_token'));
    if ($container->hasParameter('use_curl')){
        $telegram->useCurl(true);
        if ($container->hasParameter('curl_proxy')){
            $telegram->setCurlProxy($container->getParameter('curl_proxy'));
            if ($container->hasParameter('curl_proxy_socks5')){
                $telegram->setCurlProxySocks5($container->getParameter('curl_proxy_socks5'));
            }
        }
    }
    $temp = $telegram->getMe();
    if ($temp == false){
        $link = 'Look at https://t.me/socks5_bot';
        if (empty($telegram->getCurlProxy()) || $telegram->isCurlProxySocks5() == false){
            echo join(" ", ["Try socks5 proxy.", $link, "\n"]);
        }else{
            echo join(" ", ["Try other socks5 proxy.", $link, "\n"]);
        }
    }else{
        var_export($temp); echo "\n";
    }
}
/**
 * Check proxies from proxy list file
 * @param Container $container
 */
function check(Container $container){
    $telegram = new Telegram($container->getParameter('telegram_bot_token'));
    $telegram->useCurl(true);
    $telegram->setCurlProxySocks5(true);

    $file = 'app/config/proxies';
    if (!file_exists($file)){
        echo sprintf("file %s doesnt exists \n", $file);
        exit();
    }

    $list = file($file);
    foreach ($list as $proxy){
        if (empty($proxy)){
            continue;
        }
        $temp = explode("#", $proxy);
        $proxy = trim($temp[0]);
        $telegram->setCurlProxy($proxy);
        $temp = $telegram->getMe();
        if ($temp == false){
            echo $proxy . ' is bad. '; echo "\n";
        }else{
            echo $proxy . ' is good. '; echo "\n";
        }
    }
}


switch ($action){
    case "status":
        status($process);
        break;
    case "stop":
        if (status($process)){
            stop($process, $file);
        }
        break;
    case "restart":
        if (status($process)){
            stop($process, $file);
        }
        start($process, $file);
        break;
    case "start":
        start($process, $file);
        break;
    case "help":
        help($validArgs);
        break;
    case "test":
        test($container);
        break;
    case "check":
        check($container);
        break;
}